/**
 * Titanium Windows Native Module - <%- moduleName %>
 *
 * Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License.
 * Please see the LICENSE included with this distribution for details.
 */

<%
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
var MODULE_NAME = moduleIdAsIdentifier.toUpperCase();
-%>

#ifndef _<%- MODULE_NAME %>_HPP_
#define _<%- MODULE_NAME %>_HPP_

#include "<%- moduleIdAsIdentifier %>_EXPORT.h"
#include "Titanium/detail/TiBase.hpp"
#include "Titanium/Module.hpp"

<%
  var namespaces = moduleId.split('.'),
      indent = Array(namespaces.length-1).join('\t'),
      className = moduleIdAsIdentifier;
  for(var i = 0; i < namespaces.length; i++) {
    if (i < namespaces.length - 1) { -%>
<%-   Array(i+1).join('\t') %>namespace <%- capitalize(namespaces[i]) %>
<%-   Array(i+1).join('\t') %>{
<%  } else {
      className = capitalize(namespaces[i]);
    }
  }
-%>
<%- indent %>	using namespace HAL;

<%- indent %>	class <%- MODULE_NAME %>_EXPORT <%- className %> : public Titanium::Module, public JSExport<<%- className %>>
<%- indent %>	{
<%- indent %>		public:
<%- indent %>			<%- className %>(const JSContext&) TITANIUM_NOEXCEPT;
<%- indent %>			virtual void postInitialize(JSObject& js_object) override;
<%- indent %>			virtual void postCallAsConstructor(const JSContext& js_context, const std::vector<JSValue>& arguments) override;

<%- indent %>			virtual ~<%- className %>()<%= Array(className.length).join(' ') %>           = default;
<%- indent %>			<%- className %>(const <%- className %>&)            = default;
<%- indent %>			<%- className %>& operator=(const <%- className %>&) = default;
#ifdef TITANIUM_MOVE_CTOR_AND_ASSIGN_DEFAULT_ENABLE
<%- indent %>			<%- className %>(<%- className %>&&)                 = default;
<%- indent %>			<%- className %>& operator=(<%- className %>&&)      = default;
#endif

<%- indent %>			static void JSExportInitialize();

<%- indent %>			TITANIUM_PROPERTY_DEF(exampleProp);
<%- indent %>			TITANIUM_FUNCTION_DEF(example);
<%- indent %>	};
<%  for(var i = namespaces.length-1; i > 0; i--) { -%>
<%- 	Array(i).join('\t') %>}
<%  } -%>
#endif // _<%- MODULE_NAME %>_HPP_
