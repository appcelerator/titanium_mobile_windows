/**
 * Titanium Windows Native Module - <%- moduleName %>
 *
 * Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License.
 * Please see the LICENSE included with this distribution for details.
 */
#include "<%- moduleIdAsIdentifier %>.hpp"
#include "Titanium/detail/TiImpl.hpp"
#include "TitaniumWindows/LogForwarder.hpp"

using namespace Windows::ApplicationModel::Background;

namespace <%- moduleIdAsIdentifier %>
{
	/*
	 * @class
	 * @discussion This is background task for BackgroundService.
	 *             EntryPoint: <%- moduleIdAsIdentifier %>.BackgroundServiceTask
	 *
	 *   Don't remove this class because Windows Store submission process requires
	 *   at least one C++/CX class in winmd. (TIMOB-20192)
	 * 
	 *   ## Usage: (JavaScript) ##
	 *     var task = Ti.App.Windows.BackgroundService.registerTimerTask(
	 *                '<%- moduleIdAsIdentifier %>.BackgroundServiceTask', 15, false);
	 *
	 *   ## tiapp.xml ##
	 *   <windows>
	 *     <manifest>
	 *       <Extensions>
	 *         <Extension Category="windows.backgroundTasks" EntryPoint="<%- moduleIdAsIdentifier %>.BackgroundServiceTask">
	 *           <BackgroundTasks>
	 *             <Task Type="timer" />
	 *           </BackgroundTasks>
	 *         </Extension>
	 *       </Extensions>
	 *     </manifest>
	 *   </windows>
	 *
	 */
	[Windows::Foundation::Metadata::WebHostHidden]
	public ref class BackgroundServiceTask sealed : public Windows::ApplicationModel::Background::IBackgroundTask
	{
	public:
		virtual void Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance^ taskInstance);
	};

	/*
	 * BackgroundServiceTask::Run implementation
	 */
	void BackgroundServiceTask::Run(IBackgroundTaskInstance^ taskInstance)
	{
		const auto deferral = taskInstance->GetDeferral();

		//
		// BACKGROUND TASK: IMPLEMENT SOMETHING USEFUL HERE :)
		//

		// Inform this task has finished
		deferral->Complete();
	}
}

<%
  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  var namespaces = moduleId.split('.'),
      indent = Array(namespaces.length-1).join('\t'),
      className = moduleIdAsIdentifier;
  for(var i = 0; i < namespaces.length; i++) {
    if (i < namespaces.length - 1) { -%>
<%-   Array(i+1).join('\t') %>namespace <%- capitalize(namespaces[i]) %>
<%-   Array(i+1).join('\t') %>{
<%  } else {
      className = capitalize(namespaces[i]);
    }
  }
-%>
<%- indent %>	<%- className %>::<%- className %>(const JSContext& js_context) TITANIUM_NOEXCEPT
<%- indent %>		: Titanium::Module(js_context, "<%- moduleId %>")
<%- indent %>	{
<%- indent %>		TITANIUM_LOG_DEBUG("<%- className %>::ctor Initialize");
<%- indent %>	}

<%- indent %>	void <%- className %>::postInitialize(JSObject& js_object)
<%- indent %>	{
<%- indent %>	}

<%- indent %>	void <%- className %>::postCallAsConstructor(const JSContext& js_context, const std::vector<JSValue>& arguments)
<%- indent %>	{
<%- indent %>	}

<%- indent %>	void <%- className %>::JSExportInitialize()
<%- indent %>	{
<%- indent %>		JSExport<<%- className %>>::SetClassVersion(1);
<%- indent %>		JSExport<<%- className %>>::SetParent(JSExport<Titanium::Module>::Class());
<%- indent %>		TITANIUM_ADD_PROPERTY(<%- className %>, exampleProp);
<%- indent %>		TITANIUM_ADD_FUNCTION(<%- className %>, example);
<%- indent %>	}

<%- indent %>	TITANIUM_PROPERTY_GETTER(<%- className %>, exampleProp)
<%- indent %>	{
<%- indent %>		// example property getter
<%- indent %>		// 
<%- indent %>		// Getter should return JavaScript value (JSValue).
<%- indent %>		// 
<%- indent %>		// For more information on how to use JSContext / JSValue / JSObject, check out HAL:
<%- indent %>		//      https://github.com/appcelerator/HAL
<%- indent %>		// 
<%- indent %>		return get_context().CreateString("hello world");
<%- indent %>	}

<%- indent %>	TITANIUM_PROPERTY_SETTER(<%- className %>, exampleProp)
<%- indent %>	{
<%- indent %>		// example property setter
<%- indent %>		// 
<%- indent %>		// There are a variable expanded from TITANIUM_PROPERTY_SETTER macro here:
<%- indent %>		//     JSValue argument ... JavaScript value that is passed to this setter
<%- indent %>		// 
<%- indent %>		// Example:
<%- indent %>		//   # Check if it's a string
<%- indent %>		//      auto _0 = argument.IsString();
<%- indent %>		// 
<%- indent %>		//   # Convert argument to std::string
<%- indent %>		//      auto _0 = static_cast<std::string>(argument);    
<%- indent %>		// 
<%- indent %>		//   For more information on how to use JSContext / JSValue / JSObject, check out HAL:
<%- indent %>		//      https://github.com/appcelerator/HAL
<%- indent %>		// 
<%- indent %>		// Setter should return true if the property was set, otherwise false.
<%- indent %>		// 
<%- indent %>		return true;
<%- indent %>	}

<%- indent %>	TITANIUM_FUNCTION(<%- className %>, example)
<%- indent %>	{
<%- indent %>		// example method
<%- indent %>		// 
<%- indent %>		// There are variables expanded from TITANIUM_FUNCTION macro here:
<%- indent %>		//     std::vector<JSValue> arguments ... list of arguments that is passed to this function
<%- indent %>		//     JSObject this_object           ... "this" JavaScript object
<%- indent %>		// 
<%- indent %>		// Example: 
<%- indent %>		//    # Get first argument and convert to std::string
<%- indent %>		//      auto _0 = static_cast<std::string>(arguments.at(0));    
<%- indent %>		// 
<%- indent %>		//    # Get first argument and convert to double
<%- indent %>		//      auto _0 = static_cast<double>(arguments.at(0));    
<%- indent %>		// 
<%- indent %>		//    # Get first argument and convert to std::uint32_t
<%- indent %>		//      auto _0 = static_cast<std::uint32_t>(arguments.at(0));    
<%- indent %>		// 
<%- indent %>		//   Function should return JSValue.
<%- indent %>		//   For more information on how to use JSContext / JSValue / JSObject, check out HAL:
<%- indent %>		//      https://github.com/appcelerator/HAL
<%- indent %>		// 
<%- indent %>		return get_context().CreateString("hello world");
<%- indent %>	}

<%  for(var i = namespaces.length-1; i > 0; i--) { -%>
<%- 	Array(i).join('\t') %>}
<%  } -%>
