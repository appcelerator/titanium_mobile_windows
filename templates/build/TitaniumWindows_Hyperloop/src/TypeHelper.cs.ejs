using System;
using System.Collections.Generic;

namespace TitaniumWindows_Hyperloop
{
    public delegate void HyperloopEventHandler(Event evt, object e);

    public sealed class Event
    {
        public event HyperloopEventHandler GotEvent;

        public object Target { get; set; }
        public string Name   { get; set; }

        public Event(string name, object target)
        {
            Target = target;
            Name = name;
        }

        public void HandleEvent(object sender, object e)
        {
            GotEvent?.Invoke(this, e);
        }
    }

    public sealed class EventHelper
    {

<% for(var i=0; i<native_events.length; i++) { -%>
        public static Event add_<%= native_events[i].signature %>(object target)
        {
            Event evt = new Event("<%= native_events[i].name %>", target);
            ((<%= native_events[i].type %>)target).<%= native_events[i].name %> += evt.HandleEvent;
            return evt;
        }

        public static void remove_<%= native_events[i].signature %>(object evt, object target)
        {
            ((<%= native_events[i].type %>)target).<%= native_events[i].name %> -= ((Event)evt).HandleEvent;
        }
<% } -%>
    }


    public sealed class TypeHelper
    {
        private static Dictionary<string, string> KnownTypes = new Dictionary<string, string>()
            {
                { "System.Object",    typeof(System.Object).AssemblyQualifiedName },
                { "System.String",    typeof(System.String).AssemblyQualifiedName },
                { "System.Exception", typeof(System.Exception).AssemblyQualifiedName },
            };

        private static Dictionary<string, string> AssemblyQualifiedName = new Dictionary<string, string>()
            {
<% for(var i=0; i<native_types.length; i++) { -%>
                { "<%= native_types[i].name %>", typeof(<%= native_types[i].name %>).AssemblyQualifiedName },
<% } -%>
            };

        public static Type GetType(string className)
        {
            if (!KnownTypes.ContainsKey(className) && !AssemblyQualifiedName.ContainsKey(className))
            {
                throw new TypeLoadException("Unable to find AssemblyQualifiedName for " + className);
            }

            //
            // Extract assembly qualified name for Windows namespace. 
            //
            string assemblyQualifiedName;
            if (!KnownTypes.TryGetValue(className, out assemblyQualifiedName))
            {
                AssemblyQualifiedName.TryGetValue(className, out assemblyQualifiedName);
            }

            Type type = Type.GetType(assemblyQualifiedName);
            if (type == null)
            {
                throw new TypeLoadException("Unable to load " + className);
            }

            return type;
        }
    }
}
